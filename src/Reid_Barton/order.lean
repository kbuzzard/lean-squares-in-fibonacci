import data.nat.prime
import data.pnat

import Reid_Barton.exactly_divides

open nat

namespace order

section raw_order

variables (p : ‚Ñï) (hp : p > 1)

protected def order_core : Œ† (n : ‚Ñï), n > 0 ‚Üí {r // p^r ‚à£‚à£ n}
| 0       := Œª n_pos, absurd n_pos dec_trivial
| n@(k+1) := Œª n_pos,
  have n / p < n, from div_lt_self n_pos hp,
  if h : p ‚à£ n
  then
    have p * (n / p) = n, from nat.mul_div_cancel' h,
    let ‚ü®s, hs‚ü© :=
      order_core (n / p)
        (pos_of_mul_pos_left (this.symm ‚ñ∏ n_pos : 0 < p * (n / p)) dec_trivial)
    in ‚ü®succ s, this ‚ñ∏ (exactly_divides_succ (hp.trans dec_trivial)).mp hs‚ü©
  else ‚ü®0, (exactly_divides_zero (hp.trans dec_trivial)).mp h‚ü©

def order (n : ‚Ñï) (n_pos : n > 0) : ‚Ñï := (order.order_core p hp n n_pos).val

lemma exactly_divides_order (n : ‚Ñï) (n_pos : n > 0) :
  p^(order p hp n n_pos) ‚à£‚à£ n :=
(order.order_core p hp n n_pos).property


end raw_order

/- XXX comments -/

instance : has_dvd ‚Ñï+ := ‚ü®Œª a b, a.val ‚à£ b.val‚ü©

def ùìü := {p : ‚Ñï // prime p}
notation `PP` := ùìü

def ùìü.gt_one (p : ùìü) : p.val > 1 := p.property.gt_one
def ùìü.pos (p : ùìü) : p.val > 0 := p.property.pos

instance : has_coe ùìü ‚Ñï+ := ‚ü®Œª p, ‚ü®p.val, p.pos‚ü©‚ü©

def ord (p : ùìü) (n : ‚Ñï+) : ‚Ñï := order p p.gt_one n n.property
def exactly_divides_ord {p : ùìü} {n : ‚Ñï+} : p^(ord p n) ‚à£‚à£ n :=
exactly_divides_order p p.gt_one n n.property
def exactly_divides_iff_ord {p : ùìü} {r : ‚Ñï} {n : ‚Ñï+} : ord p n = r ‚Üî p^r ‚à£‚à£ n :=
iff.intro
  (Œª e, e ‚ñ∏ exactly_divides_ord)
  (exactly_divides_unique exactly_divides_ord)

variable {p : ùìü}

-- Recursion (though we prove them in a round-about fashion)

lemma ord_not_div {n : ‚Ñï+} : ¬¨(‚Üëp ‚à£ n) ‚Üî ord p n = 0 :=
(exactly_divides_zero p.pos).trans exactly_divides_iff_ord.symm

lemma ord_div {n : ‚Ñï+} : ord p (p * n) = succ (ord p n) :=
exactly_divides_iff_ord.mpr
((exactly_divides_succ p.pos).mp exactly_divides_ord)

-- Multiplicative

lemma ord_one : ord p 1 = 0 :=
exactly_divides_iff_ord.mpr (exactly_divides_one p.property)

lemma ord_mul (a b : ‚Ñï+) : ord p (a * b) = ord p a + ord p b :=
exactly_divides_iff_ord.mpr
(exactly_divides_mul p.property
  exactly_divides_ord exactly_divides_ord)

lemma ord_ppow {k : ‚Ñï} {a : ‚Ñï+} : ord p (pnat.pow a k) = k * ord p a :=
exactly_divides_iff_ord.mpr
(exactly_divides_pow p.property exactly_divides_ord)

lemma ord_pow {k : ‚Ñï} {a : ‚Ñï+} : ord p (a^k) = k * ord p a := ord_ppow

-- Gcd

/-

def pgcd (a b : ‚Ñï+) : ‚Ñï+ := ‚ü®gcd a b, gcd_pos_of_pos_left b a.pos‚ü©

--set_option pp.notation false
@[simp] lemma pgcd_coe_something (a b : ‚Ñï) : pgcd a b = gcd a b := begin
unfold pgcd,
--rw pnat.coe_nat_coe a, -- I am so rubbish at coe
sorry
end

--#print notation ‚Ñï‚àû
lemma ord_pgcd {a b : ‚Ñï+} : ord p (pgcd a b) = min (ord p a) (ord p b) :=
exactly_divides_iff_ord.mpr
(exactly_divides_gcd
  exactly_divides_ord exactly_divides_ord)

lemma ord_gcd {a b : ‚Ñï+} : ord p (gcd a b) = min (ord p a) (ord p b) :=
have pgcd a b = gcd a b, from (pnat.coe_nat_coe _).symm, this ‚ñ∏ ord_pgcd

instance pnat.has_le : has_le (‚Ñï+) := ‚ü®Œª a b, a.1 ‚â§ b.1‚ü©

-- Addition

-- ord_mul : ‚àÄ {p : PP} (a b : ‚Ñï+), ord p (a * b) = ord p a + ord p b
lemma ord_le_mul_right (a b : ‚Ñï+) : ord p a ‚â§ ord p (a * b) :=
begin
have H : ‚àÄ a b c : ‚Ñï+, a = b + c ‚Üí b ‚â§ a := sorry,
--refine H _ _ _ (ord_mul a b) -- error
sorry
end

--set_option pp.all true
--set_option pp.notation false

lemma ord_add {a b : ‚Ñï+} : ord p (a + b) ‚â• min (ord p a) (ord p b) :=
begin
  --have H (a b : ‚Ñï+) : gcd a b ‚à£ (a + b) := sorry,
  have H : ‚àÄ (a b : ‚Ñï+), gcd a b ‚à£ (a + b) :=
  Œª a b, (nat.dvd_add_iff_left (gcd_dvd_right _ _)).1 (gcd_dvd_left _ _),
  rw ‚Üêord_gcd,
  have H3 : ord p (a + b) ‚â• ord p (pgcd a b) := sorry,
  have H2 := H a b,
  suffices : H3 = (ord p (a + b) ‚â• ord p ‚Üë(gcd ‚Üëa ‚Üëb)),
  -- now need to uncast to use H2?
  
  cases H2 with d Hd,
  /-
  Hd :
  @eq.{1} nat
    (@has_add.add.{0} nat nat.has_add
       (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) a)
       (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) b))
    (@has_mul.mul.{0} nat
       (@mul_zero_class.to_has_mul.{0} nat
          (@semiring.to_mul_zero_class.{0} nat (@comm_semiring.to_semiring.{0} nat nat.comm_semiring)))
       (nat.gcd (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) a)
          (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) b))
       d)
‚ä¢ @ge.{0} nat nat.has_le (order.ord p (@has_add.add.{0} pnat pnat.has_add a b))
    (order.ord p
       (@coe.{1 1} nat pnat (@coe_to_lift.{1 1} nat pnat (@coe_base.{1 1} nat pnat coe_nat_pnat))
          (nat.gcd (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) a)
             (@coe.{1 1} pnat nat (@coe_to_lift.{1 1} pnat nat (@coe_base.{1 1} pnat nat coe_pnat_nat)) b))))
             -/
  change a + b = _ at Hd,
  
  --have H2 : ord p (gcd a b) ‚â• min (ord p a) (ord p b),
  -- it's ord_gcd
    
  sorry,
end 
  
  #exit
  begin
    intros a b,
    refine (nat.dvd_add_iff_left _).1 _,
      exact gcd_dvd_right _ _,
    exact gcd_dvd_left _ _ -- 
  end,
sorry
end 
#check @nat.dvd_add_iff_left


-/
end order
